apiVersion: v1
kind: ConfigMap
metadata:
  name: chaos-experiment
data:
  experiment.json: |
    {
      "version": "1.0.0",
      "title": "Client Service Resilience Test",
      "description": "Verify client service resilience when server service fails",
      "tags": ["kubernetes", "resilience"],
      "steady-state-hypothesis": {
        "title": "Services are running normally",
        "probes": [
          {
            "type": "probe",
            "name": "server-service-available",
            "tolerance": 200,
            "provider": {
              "type": "http",
              "url": "http://server-service:8080/hello",
              "timeout": 5
            }
          }
        ]
      },
      "method": [
        {
          "type": "action",
          "name": "terminate-server-pod",
          "provider": {
            "type": "python",
            "module": "chaosk8s.pod.actions",
            "func": "terminate_pods",
            "arguments": {
              "label_selector": "app=server",
              "name_pattern": "server-",
              "rand": true
            }
          }
        },
        {
          "type": "probe",
          "name": "wait-for-server-recovery",
          "provider": {
            "type": "python",
            "module": "chaosk8s.pod.probes",
            "func": "pods_in_phase",
            "arguments": {
              "label_selector": "app=server",
              "phase": "Running"
            }
          },
          "tolerance": 1
        },
        {
          "type": "probe",
          "name": "verify-server-service-recovered",
          "provider": {
            "type": "http",
            "url": "http://server-service:8080/hello",
            "timeout": 5
          },
          "tolerance": 200
        }
      ],
      "rollbacks": []
    }

    
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: chaos-service-account


---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: chaos-cluster-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "configmaps", "nodes"]
  verbs: ["get", "list", "watch", "create", "delete"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch", "patch"]
- apiGroups: ["networking.k8s.io"]
  resources: ["networkpolicies"]
  verbs: ["get", "list", "create", "delete"]


---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: chaos-cluster-binding
subjects:
- kind: ServiceAccount
  name: chaos-service-account
  namespace: default
roleRef:
  kind: ClusterRole
  name: chaos-cluster-role
  apiGroup: rbac.authorization.k8s.io


---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chaos-toolkit
spec:
  replicas: 1
  selector:
    matchLabels:
      app: chaos-toolkit
  template:
    metadata:
      labels:
        app: chaos-toolkit
    spec:
      serviceAccountName: chaos-service-account
      containers:
      - name: chaos-toolkit
        image: chaostoolkit/chaostoolkit
        command: 
        - "/bin/sh"
        - "-c"
        args:
        - |
          echo "Installing required packages..."
          pip install chaostoolkit-kubernetes chaostoolkit-lib
          echo "Starting chaos toolkit container..."
          sleep infinity
        volumeMounts:
        - name: experiment-volume
          mountPath: /tmp/experiments
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      volumes:
      - name: experiment-volume
        configMap:
          name: chaos-experiment
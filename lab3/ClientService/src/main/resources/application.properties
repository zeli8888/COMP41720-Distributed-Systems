spring.application.name=ClientService
server.uri=${SERVER_URI:http://localhost:8080/api/}


# Resilience4j Circuit Breaker Configuration
## only consider closed calls in the sliding window
resilience4j.circuitbreaker.instances.serverService.slidingWindowSize=10
## failure threshold in percentage
resilience4j.circuitbreaker.instances.serverService.failureRateThreshold=50
## duration to wait before attempting to half-open
resilience4j.circuitbreaker.instances.serverService.waitDurationInOpenState=5000
## maximum number of concurrent requests allowed when half-open
resilience4j.circuitbreaker.instances.serverService.permittedNumberOfCallsInHalfOpenState=3


# Resilience4j Retry Configuration
## maximum number of retry attempts, including the initial call
resilience4j.retry.instances.serverService.maxAttempts=4
## initial wait duration between retry attempts, 2s
resilience4j.retry.instances.serverService.waitDuration=2000
## enable exponential backoff strategy, with a multiplier of 2, 2s -> 4s -> 6s
resilience4j.retry.instances.serverService.enableExponentialBackoff=true
resilience4j.retry.instances.serverService.exponentialBackoffMultiplier=2
## enable Jitter to avoid thundering herd problem
resilience4j.retry.instances.serverService.enableRandomizedWait=true
## factor to calculate the random wait duration
## e.g., 0.25 means 25% of the wait duration on the basis of exponential backoff, 2s(0.5s) ? 4s(1s) -> 6s(1.5s)
resilience4j.retry.instances.serverService.randomizedWaitFactor=0.25

# timeout for server calls
timeout.connection.second=3
timeout.read.second=3